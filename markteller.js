// Generated by LiveScript 1.5.0
(function(){
  'use strict';
  var Markteller;
  Markteller = function(){
    var Markteller, exports;
    Markteller = function(markdown, opt){
      var self, mdDoc, that, ref$, frame, i, i$, len$, line;
      self = this;
      this.opt = {
        render: '.markteller',
        lang: 'en-us'
      };
      if (opt) {
        this.opt = import$(this.opt, opt);
      }
      if (undefined === this.opt.progressRender) {
        this.opt.progressRender = function(){};
      }
      this.screen = document.querySelector(this.opt.render);
      this.screen.appendChild(this.scene = document.createElement('div'));
      this.scene.appendChild(this.frame = document.createElement('img'));
      this.screen.appendChild(this.subtitle = document.createElement('div'));
      _setScreenStyle.call(this);
      _responseScreenSize.call(this);
      window.addEventListener('resize', function(){
        _responseScreenSize.call(self);
      });
      this.actions = [];
      mdDoc = markdown.split('\n');
      this.title = (that = /^#\s*(.*)/.exec(mdDoc[0])) ? that[1] : 'No title';
      ref$ = [null, 0], frame = ref$[0], i = ref$[1];
      for (i$ = 0, len$ = mdDoc.length; i$ < len$; ++i$) {
        line = mdDoc[i$];
        if (/^#.*/.exec(line)) {
          continue;
        }
        if (/^\s*$/.exec(line) || /<!--.*-->/.exec(line)) {
          continue;
        }
        if (that = /^\!\[.*\]\((.*)\)/.exec(line)) {
          frame = that[1];
        } else {
          this.actions.push({
            text: line,
            frame: frame,
            id: ++i
          });
        }
      }
      this.actionLen = this.actions.length;
      this.cover = this.actions[0].frame;
      this.actionI = 0;
      this.speechRecord = 0;
      if (that = /(.+)\?(\d+)$/.exec(location.href)) {
        this.baseUrl = that[1];
        this.actionI = -1 + parseInt(that[2]);
        this.status = 'paused';
        return _updateScreen.call(this, this.actions[this.actionI]);
      } else {
        this.baseUrl = location.href;
        this.actionI = 0;
        this.status = 'start';
        return _updateScreen.call(this, {
          frame: this.cover,
          text: this.title
        });
      }
    };
    Markteller.prototype.play = function(){
      _play.call(this);
    };
    Markteller.prototype.pause = function(){
      _pause.call(this);
    };
    Markteller.prototype.prev = function(){
      _prev.call(this);
    };
    Markteller.prototype.next = function(){
      _next.call(this);
    };
    Markteller.prototype.getTitle = function(){
      return this.title;
    };
    Markteller.prototype.getStatus = function(){
      return this.status;
    };
    Markteller.prototype.getLength = function(){
      return this.actionLen;
    };
    function _setScreenStyle(){
      this.screen.style.position = 'relative';
      this.screen.style.backgroundColor = '#222';
      this.scene.id = 'scene';
      this.scene.style.position = 'absolute';
      this.scene.style.textAlign = 'center';
      this.scene.style.width = '100%';
      this.subtitle.id = 'subtitle';
      this.subtitle.style.position = 'absolute';
      this.subtitle.style.textAlign = 'center';
      this.subtitle.style.color = '#FFF';
      this.subtitle.style.fontFamily = 'Helvetica';
      this.subtitle.style.width = '100%';
      this.subtitle.style.display = 'flex';
      this.subtitle.style.alignItems = 'center';
      this.subtitle.style.justifyContent = 'center';
    }
    function _responseScreenSize(){
      if (window.innerWidth > window.innerHeight) {
        this.scene.style.height = '80%';
        this.scene.style.top = 0;
        this.subtitle.style.height = '20%';
        this.subtitle.style.bottom = 0;
        this.subtitle.style.fontSize = '2.5vw';
      } else {
        this.scene.style.height = '70%';
        this.scene.style.top = 0;
        this.subtitle.style.height = '30%';
        this.subtitle.style.bottom = 0;
        this.subtitle.style.fontSize = '4vh';
      }
      _responseFrameSize.call(this);
    }
    function _responseFrameSize(){
      if (this.frame.width > this.frame.height) {
        this.frame.style.width = '100%';
        this.frame.style.height = 'auto';
      } else {
        this.frame.style.width = 'auto';
        this.frame.style.height = '100%';
      }
    }
    function _play(){
      var lastSpeechRecord;
      this.status = 'playing';
      if (window.speechSynthesis.paused) {
        window.speechSynthesis.resume();
        /*
        Problem:
          The utterance event listener crash when paused at the end of the speech,
          so the trigger will not happen to continue.
        Workaround:
          Reocrd the action-i
        */
        lastSpeechRecord = this.speechRecord;
        setTimeout(function(){
          if (lastSpeechRecord === this.speechRecord) {
            this._next();
          }
        }, 1000);
      } else {
        _action.call(this);
      }
    }
    function _pause(){
      this.status = 'paused';
      window.speechSynthesis.pause();
    }
    function _prev(){
      var self;
      self = this;
      switch (self.actionI) {
      case 0:
        return _setToStart.call(self);
      case -1:
        self.actionI = self.actionLen - 1;
        if ('start' === self.status) {
          self.status = 'paused';
        }
        break;
      default:
        self.actionI -= 1;
      }
      _transition.call(self);
    }
    function _next(){
      if (this.actionI === this.actionLen - 1) {
        return _setToStart.call(this);
      }
      if ('start' === this.status) {
        this.status = 'paused';
      } else {
        this.actionI += 1;
      }
      _transition.call(this);
    }
    function _updateScreen(it){
      this.frame.src = it.frame;
      this.subtitle.innerHTML = it.text;
      _responseFrameSize.call(this);
      this.opt.progressRender(this.actions[this.actionI].id + " / " + this.actionLen);
      _rewriteUrl(this.baseUrl + '?' + this.actions[this.actionI].id.toString());
    }
    function _transition(){
      window.speechSynthesis.resume();
      window.speechSynthesis.cancel();
      switch (this.status) {
      case 'playing':
        _action.call(this);
        break;
      case 'start':
      case 'paused':
        _updateScreen.call(this, this.actions[this.actionI]);
      }
    }
    function _setToStart(){
      window.speechSynthesis.resume();
      this.actionI = -1;
      this.status = 'start';
      window.speechSynthesis.cancel();
      _updateScreen.call(this);
      _rewriteUrl(this.baseUrl);
    }
    function _action(){
      var act, ref$;
      act = this.actions[this.actionI];
      _updateScreen.call(this, (ref$ = import$({}, act), ref$.text = null, ref$));
      _speech.call(this, act.text);
    }
    function _speech(text){
      var self;
      self = this;
      text = text.replace(/&quot;/g, '"');
      text = text.replace(/&apos;/g, '\'');
      window.speechSynthesis.cancel();
      window.utterance = new SpeechSynthesisUtterance(text);
      window.utterance.lang = 'en-us';
      window.utterance.rate = 1;
      window.utterance.onstart = function(){
        return self.subtitle.innerHTML = text;
      };
      window.utterance.onboundary = function(){
        return self.speechRecord += 1;
      };
      window.utterance.onend = function(){
        if ('playing' !== self.status || window.speechSynthesis.speaking) {
          return;
        }
        self.actionI += 1;
        if (self.actionI < self.actionLen) {
          return _action.call(self);
        }
        return _setToStart.call(self);
      };
      window.speechSynthesis.speak(window.utterance);
      window.onbeforeunload = function(){
        return self.pause();
      };
    }
    function _rewriteUrl(it){
      history.pushState({}, null, it);
    }
    if (undefined !== typeof exports) {
      if (undefined !== typeof module && module.exports) {
        exports = module.exports = Markteller;
      }
      exports.Markteller = Markteller;
    } else {
      this.Markteller = Markteller;
    }
    return Markteller;
  }.call(this);
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
